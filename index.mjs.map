{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function' ;\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Returns a function that applies a specified number of arguments to a provided function.\n*\n* ## Notes\n*\n* -   The returned function **always** invokes the wrapped function with a specified number of arguments, even when the returned function is provided fewer arguments. The value for the missing arguments is equal to `undefined`.\n*\n* @param {Function} fcn - input function\n* @param {NonNegativeInteger} arity - number of arguments\n* @param {*} [thisArg] - function context\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a nonnegative integer\n* @returns {Function} function wrapper\n*\n* @example\n* function foo() {\n*     var s;\n*     var i;\n*\n*     s = 0;\n*     for ( i = 0; i < arguments.length; i++ ) {\n*         s += arguments[ i ];\n*     }\n*     return s;\n* }\n*\n* var bar = naryFunction( foo, 2 );\n*\n* var out = bar( 1, 2, 3, 4, 5, 6 );\n* // returns 3\n*/\nfunction naryFunction( fcn, arity, thisArg ) {\n\tvar fcns;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '0km3p', fcn ) );\n\t}\n\tif ( !isNonNegativeInteger( arity ) ) {\n\t\tthrow new TypeError( format( '0km3k', arity ) );\n\t}\n\tfcns = [ nullary, unary, binary, ternary, quaternary, quinary ];\n\treturn ( arity < fcns.length ) ? fcns[ arity ] : nary;\n\n\t/**\n\t* Invokes a nullary function.\n\t*\n\t* @private\n\t* @param {...*} [args] - arguments\n\t* @returns {*} return value\n\t*/\n\tfunction nullary() {\n\t\treturn fcn.call( thisArg );\n\t}\n\n\t/**\n\t* Invokes a unary function.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {...*} [args] - arguments\n\t* @returns {*} return value\n\t*/\n\tfunction unary( x ) {\n\t\treturn fcn.call( thisArg, x );\n\t}\n\n\t/**\n\t* Invokes a binary function.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {...*} [args] - arguments\n\t* @returns {*} return value\n\t*/\n\tfunction binary( x, y ) {\n\t\treturn fcn.call( thisArg, x, y );\n\t}\n\n\t/**\n\t* Invokes a ternary function.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @param {...*} [args] - arguments\n\t* @returns {*} return value\n\t*/\n\tfunction ternary( x, y, z ) {\n\t\treturn fcn.call( thisArg, x, y, z );\n\t}\n\n\t/**\n\t* Invokes a quaternary function.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @param {*} w - input value\n\t* @param {...*} [args] - arguments\n\t* @returns {*} return value\n\t*/\n\tfunction quaternary( x, y, z, w ) {\n\t\treturn fcn.call( thisArg, x, y, z, w );\n\t}\n\n\t/**\n\t* Invokes a quinary function.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @param {*} w - input value\n\t* @param {*} v - input value\n\t* @param {...*} [args] - arguments\n\t* @returns {*} return value\n\t*/\n\tfunction quinary( x, y, z, w, v ) {\n\t\treturn fcn.call( thisArg, x, y, z, w, v );\n\t}\n\n\t/**\n\t* Invokes an n-ary function.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @param {*} w - input value\n\t* @param {*} v - input value\n\t* @param {*} t - input value\n\t* @param {...*} args - arguments\n\t* @returns {*} return value\n\t*/\n\tfunction nary( x, y, z, w, v, t ) {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [ x, y, z, w, v, t ];\n\t\tfor ( i = 6; i < arity; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn fcn.apply( thisArg, args );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default naryFunction;\n"],"names":["naryFunction","fcn","arity","thisArg","fcns","isFunction","TypeError","format","isNonNegativeInteger","call","x","y","z","w","v","length","t","args","i","push","arguments","apply"],"mappings":";;uSA4DA,SAASA,EAAcC,EAAKC,EAAOC,GAClC,IAAIC,EACJ,IAAMC,EAAYJ,GACjB,MAAM,IAAIK,UAAWC,EAAQ,QAASN,IAEvC,IAAMO,EAAsBN,GAC3B,MAAM,IAAII,UAAWC,EAAQ,QAASL,IAGvC,OAASA,GADTE,EAAO,CAUP,WACC,OAAOH,EAAIQ,KAAMN,EACjB,EAUD,SAAgBO,GACf,OAAOT,EAAIQ,KAAMN,EAASO,EAC1B,EAWD,SAAiBA,EAAGC,GACnB,OAAOV,EAAIQ,KAAMN,EAASO,EAAGC,EAC7B,EAYD,SAAkBD,EAAGC,EAAGC,GACvB,OAAOX,EAAIQ,KAAMN,EAASO,EAAGC,EAAGC,EAChC,EAaD,SAAqBF,EAAGC,EAAGC,EAAGC,GAC7B,OAAOZ,EAAIQ,KAAMN,EAASO,EAAGC,EAAGC,EAAGC,EACnC,EAcD,SAAkBH,EAAGC,EAAGC,EAAGC,EAAGC,GAC7B,OAAOb,EAAIQ,KAAMN,EAASO,EAAGC,EAAGC,EAAGC,EAAGC,EACtC,IAjFqBC,OAAWX,EAAMF,GAgGvC,SAAeQ,EAAGC,EAAGC,EAAGC,EAAGC,EAAGE,GAC7B,IAAIC,EACAC,EAGJ,IADAD,EAAO,CAAEP,EAAGC,EAAGC,EAAGC,EAAGC,EAAGE,GAClBE,EAAI,EAAGA,EAAIhB,EAAOgB,IACvBD,EAAKE,KAAMC,UAAWF,IAEvB,OAAOjB,EAAIoB,MAAOlB,EAASc,EAC3B,CACF"}